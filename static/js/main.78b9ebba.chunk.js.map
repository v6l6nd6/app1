{"version":3,"sources":["redux/users-reducer.ts","components/Profile/ProfileInfo/prof.jpg","components/common/FormsControl/FormsControl.tsx","assets/images/loader.svg","components/common/Preloader/Preloader.js","components/Profile/Profile.module.scss","components/common/Preloader/Preloader.module.scss","pages/Chat/ChatPage.module.scss","api/api.ts","components/Navbar/Navbar.module.scss","redux/sidebar-reducer.js","api/profileAPI.ts","redux/profile-reducer.ts","api/loginAPI.ts","redux/auth-reducer.ts","api/chatPageAPI.ts","redux/chat-reducer.ts","redux/redux-store.ts","components/Header/headerlogo.png","components/Header/Header.tsx","components/Navbar/Navbar.jsx","assets/images/loader.gif","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Header/HeaderContainer.tsx","components/Profile/ProfileContainer.tsx","components/Login/Login.tsx","pages/Chat/ChatPage.tsx","components/Dialogs/TrainingComponent.tsx","App.js","index.js","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Login/Login.module.scss","api/userAPI.ts","components/Header/Header.module.scss","components/common/FormsControl/FormsControl.module.css","redux/dialogs-reducer.ts"],"names":["FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","IS_FOLLOWING_PROGRESS","FILTER_SEARCH","initialState","users","pageSize","totalUsersCount","currentPage","ifFetching","followingInProgress","filter","term","friend","actions","followAC","userId","type","unfollowAC","setUsersAC","setCurrentPageAC","setTotalUsersCountAC","count","toggleIsFetchingAC","toggleFollowingProgressAC","filterSearchAC","payload","getUsersThunkCreator","dispatch","a","userAPI","getUsers","response","items","totalCount","followThunkCreator","follow","resultCode","unfollowThunkCreator","unfollow","usersReducer","state","action","stateCopy","map","u","id","followed","FormForControls","Element","input","meta","props","hasError","touched","error","className","fc","formControl","Preloader","pr","prloader_img","src","preloader","alt","module","exports","ResultCodeEnum","instance","axios","create","withCredentials","baseURL","headers","initalizeState","profileAPI","get","then","data","profile","put","status","ADD_POST","UPADTE_NEW_POST_TEXT","SET_USER_PROFIEL","SET_STATUS","DELETE_POST","posts","message","newPostText","getUserProfile","loginAPI","email","password","rememberMe","captcha","post","delete","SET_USER_DATA","GET_CAPTCHA_URL_SUCCES","login","isAuth","captchaUrl","setUserData","getCaptchaUrlSucces","setUserDataThunkCreate","dateOfMyLogin","authReducer","ws","subscribes","closeHandler","console","log","forEach","el","setTimeout","createChannel","openHandler","notifySubscribersStatusHandle","cleanUpChannel","removeEventListener","eventDataWebSocket","close","WebSocket","addEventListener","e","newMessages","JSON","parse","chatAPI","eventName","push","s","send","MESS_RECEIVED","STATUS_CHANGE","messages","newMessageHandler","newStatusHandler","newStatusHandlerCreator","newMessageHandlerCreator","reducers","combineReducers","profileReducer","newPost","messa","newText","p","postId","dialogsReducer","sidebarReducer","form","formReducer","chat","slice","store","createStore","applyMiddleware","thunkMiddleware","window","Header","logOutThunkCreator","logOut","h","header","imgheader","headerLogo","linkLogin","loginBtn","onClick","LoginLabel","to","NavBar","n","nav","item","isActive","active","href","ProfileStatusWithHook","useState","editMode","setEditMode","setStatus","useEffect","onChange","event","currentTarget","value","onBlur","ProfileDataFormmm","reduxForm","handleSubmit","onSubmit","editBtn","Field","component","name","placeholder","Object","keys","contacts","key","ProfileData","isOwner","goToEditMode","profFomr","OnefieldProf","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","saveProfile","loader","proffPhoto","photos","large","profPhoto","initialValues","FormData","Profile","container","HeaderContainer","this","React","Component","connect","ProfileContainer","useParams","useDispatch","useSelector","setStatuss","getUserProfilee","getState","LoginForm","validateSchema","Yup","shape","required","values","loginThunkCreatorr","checkbox","validationSchema","Login","errors","Pass","Subm","btn","LoginPresentationContainer","loginThunkCreator","regInfo","ChatPage","Chat","cp","chatPageBlock","index","oneFromDates","Messages","h2ref","useRef","useLayoutEffect","current","scrollIntoView","Message","ref","memo","photo","userName","AddMessageForm","stateMessages","setStateMessages","disabled","TrainingComponent","setUsers","oneUser","setOneUser","valueForm","setValueForm","searchTemp","setTempSearch","res","user","small","DialogsContainer","lazy","UsersContainer","App","fallback","path","element","ReactDOM","render","StrictMode","document","getElementById","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","mes","dialogs","newMessageBody","body","sendMessageCreator","updateNewMessageBodyCreator"],"mappings":"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","file":"static/js/main.78b9ebba.chunk.js","sourcesContent":["\r\n\r\nimport { userAPI } from \"../api/userAPI\";\r\nimport { UserType } from \"../components/common/types/types\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\nconst FOLLOW = 'FOLLOW-POST';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING= 'TOGGLE_IS_FETCHING';\r\nconst IS_FOLLOWING_PROGRESS = 'IS_FOLLOWING_PROGRESS';\r\nconst FILTER_SEARCH = 'FILTER_SEARCH';\r\n\r\nlet initialState = {\r\n    users:[]as Array<UserType>,\r\n    pageSize:5 as number,\r\n    totalUsersCount:100 as number,\r\n    currentPage:1 as number,\r\n    ifFetching:true as boolean,\r\n    followingInProgress:[] as Array<number|null>,\r\n    filter:{\r\n        term:\"\",\r\n        friend:\"\"\r\n    }\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nexport type filterType = typeof initialState.filter;\r\n\r\nexport const usersReducer = (state = initialState, action:ActionsTypes):initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            let stateCopy = {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                }),\r\n            }\r\n            return stateCopy\r\n        }\r\n        case UNFOLLOW: {\r\n            let stateCopy = {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                }),\r\n            }\r\n            return stateCopy\r\n        }\r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage:action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount:action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING :{\r\n            return {...state,ifFetching:action.ifFetching}\r\n        }\r\n        case IS_FOLLOWING_PROGRESS: {\r\n            return {...state,\r\n                 followingInProgress:action.ifFetching\r\n                ?[...state.followingInProgress,action.userId]\r\n                :state.followingInProgress.filter(id=>id!==action.userId)\r\n            }\r\n        }\r\n        case FILTER_SEARCH:{\r\n            return {...state,filter:action.payload}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    followAC :  (userId:number|null) => ({ type: FOLLOW, userId }as const),\r\n unfollowAC : (userId:number|null) => ({ type: UNFOLLOW, userId }as const),\r\n setUsersAC : (users:Array<UserType>) => ({ type: SET_USERS, users }as const),\r\n setCurrentPageAC : (currentPage:number) => ({ type: SET_CURRENT_PAGE, currentPage }as const),\r\n setTotalUsersCountAC :(totalUsersCount:number) => ({ type: SET_TOTAL_USERS_COUNT, count:totalUsersCount }as const),\r\n toggleIsFetchingAC : (ifFetching:boolean) => ({ type: TOGGLE_IS_FETCHING, ifFetching }as const),\r\n toggleFollowingProgressAC : (ifFetching:boolean,userId:number|null) => ({ type: IS_FOLLOWING_PROGRESS, ifFetching,userId }as const),\r\n filterSearchAC :  (term:string,friend:any) => ({ type: FILTER_SEARCH, payload:{term,friend} }as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n\r\nexport const getUsersThunkCreator = (currentPage:number,pageSize:number,filter:filterType):ThunkType => async (dispatch)=>{\r\n   \r\n    dispatch(actions.toggleIsFetchingAC(true))\r\n    dispatch(actions.filterSearchAC(filter.term,filter.friend))\r\n    const response = await  userAPI.getUsers(currentPage,pageSize,filter.term);\r\n        dispatch(actions.toggleIsFetchingAC(false))\r\n        dispatch(actions.setUsersAC(response.items))\r\n        dispatch(actions.setTotalUsersCountAC(response.totalCount))\r\n}\r\n\r\nexport const followThunkCreator = (userId:number|null):ThunkType =>async(dispatch)=>{\r\n  \r\n        dispatch(actions.toggleFollowingProgressAC(true,userId))\r\n      let response = await  userAPI.follow(userId)\r\n                if (response.resultCode === 0) { \r\n                    dispatch(actions.followAC(userId))\r\n                }\r\n                dispatch(actions.toggleFollowingProgressAC(false,userId))\r\n            \r\n \r\n }\r\n\r\n \r\n export const unfollowThunkCreator = (userId:number|null):ThunkType =>async(dispatch)=>{\r\n    \r\n        dispatch(actions.toggleFollowingProgressAC(true,userId))\r\n     const response = await  userAPI.unfollow(userId);\r\n                if (response.resultCode === 0) {\r\n                    dispatch(actions.unfollowAC(userId))\r\n                }\r\n                dispatch(actions.toggleFollowingProgressAC(false,userId))\r\n           \r\n \r\n }\r\n\r\nexport default usersReducer;","export default __webpack_public_path__ + \"static/media/prof.8e1ed303.jpg\";","import { ReactElement } from \"react\";\r\nimport { WrappedFieldInputProps, WrappedFieldMetaProps, WrappedFieldProps, WrappedFieldsProps } from \"redux-form\";\r\nimport fc from \"./FormsControl.module.css\";\r\n\r\ntype renderFieldType = {\r\n    meta: WrappedFieldMetaProps,\r\n    input: ReactElement<React.Component, React.FC> | null\r\n  }\r\n\r\nexport const FormForControls:React.FC<any> = (Element):any=>({input,meta,...props}:renderFieldType)=>{\r\n    const hasError = meta.touched && meta.error;\r\nreturn (\r\n    <div className={fc.formControl + \" \" + (hasError ? fc.error : \"\")}>\r\n        <Element {...props} {...input} />\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n)\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/loader.2aa5d275.svg\";","import React from 'react';\r\nimport preloader from '../../../assets/images/loader.svg';\r\nimport pr from \"./Preloader.module.scss\"\r\nlet Preloader = (props)=>{\r\n    return  <img className={pr.prloader_img} src={preloader} alt=\"piska\" />\r\n};\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__36g-L\",\"imgcontent\":\"Profile_imgcontent__1xG8h\",\"container\":\"Profile_container__aVR4F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"prloader_img\":\"Preloader_prloader_img__1sOMK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatPageBlock\":\"ChatPage_chatPageBlock__2I1i9\"};","\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: { \"API-KEY\": \"7486980c-7264-4f8c-ac20-0925c8ef6b52\" }\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    captchaIsReq = 10\r\n}\r\n\r\nexport type TypeResponse<OBJ={},RC=ResultCodeEnum>={\r\n    resultCode: RC ,\r\nmessages: Array<string>,\r\ndata: OBJ\r\n}\r\n\r\n\r\n\r\n\r\n// axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, { withCredentials: true })\r\n// .then(response => {\r\n \r\n//   if(response.data.resultCode===0){\r\n//     this.props.setUserData(response.data.data.email,response.data.data.login,response.data.data.id)\r\n//   }\r\n// })","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1jUr3\",\"item\":\"Navbar_item__vjzf-\",\"active\":\"Navbar_active__3JnsG\"};","\r\n\r\nlet initalizeState = {};\r\n\r\nexport const sidebarReducer = (state = initalizeState, action) => {\r\n\r\n    return state;\r\n}","import { ProfilePutAPIType, ProfileType } from \"../components/common/types/types\";\r\nimport { instance, TypeResponse } from \"./api\";\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId:number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    saveProfilee(profile:ProfileType){\r\n        return instance.put<ProfilePutAPIType>(`profile/`,profile).then(response=>response.data)\r\n    },\r\n    getStatus(userId:number){\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n        \r\n    },\r\n    updateStatus(status:string){\r\n        return instance.put<TypeResponse>(`profile/status/`,{status:status})\r\n        \r\n    } \r\n};","import { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { profileAPI } from \"../api/profileAPI\";\r\nimport { ProfileType } from \"../components/common/types/types\";\r\n\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPADTE_NEW_POST_TEXT = 'UPADTE-NEW-POST-TEXT';\r\nconst SET_USER_PROFIEL = 'SET_USER_PROFIEL';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\ntype ArrayPostsType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: 'Hi , how are youuu?' },\r\n        { id: 2, message: 'Its my first po' },\r\n        { id: 3, message: 'Whats app?' },\r\n        { id: 4, message: 'Whtfck???' },\r\n        { id: 5, message: 'Ohhhyeee' },\r\n    ] as Array<ArrayPostsType>,\r\n    newPostText: 'ite-kamasutra' as string,\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkTypes = BaseThunkType<ActionsType>\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = { id: 6, message: action.messa };\r\n            let stateCopy = { ...state }\r\n            stateCopy.posts = [...state.posts];\r\n            stateCopy.posts.push(newPost);\r\n            return stateCopy;\r\n        }\r\n        case UPADTE_NEW_POST_TEXT: {\r\n            let stateCopy = { ...state }\r\n            stateCopy.newPostText = action.newText;\r\n            return stateCopy;\r\n        }\r\n        case SET_USER_PROFIEL: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (messa: string) => ({ type: ADD_POST, messa } as const),\r\n    upDateNewPostTextActionCreator: (text: string) => {\r\n        return { type: UPADTE_NEW_POST_TEXT, newText: text } as const\r\n    },\r\n    setUserProfile: (profile: ProfileType) => ({ type: SET_USER_PROFIEL, profile } as const),\r\n    setStatus: (status: string) => ({ type: SET_STATUS, status } as const),\r\n    deletePost: (postId: number) => ({ type: DELETE_POST, postId } as const)\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkTypes => async (dispatch) => {\r\n    let response = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setUserProfile(response))  //response.data\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkTypes => async (dispatch,getState) => {\r\n    const userId = getState().authReducer.userId;\r\n    const response = await profileAPI.saveProfilee(profile);\r\n    if (response.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        }\r\n\r\n        // } else {\r\n        //     dispatch(stopSubmit(\"formddd\", { _error: response.data.messages[0] }))\r\n        // }\r\n    }\r\n}","import { authLoginPutType, authLogoutDeleteType, getCaptchaType } from \"../components/common/types/types\"\r\nimport { instance } from \"./api\"\r\n\r\nexport const loginAPI = {\r\n    logIn(email:string,password:string,rememberMe=false,captcha=null){\r\n        return instance.post<authLoginPutType>(`/auth/login/`,{email,password,rememberMe,captcha})\r\n    },\r\n    logOut(){\r\n        return instance.delete<authLogoutDeleteType>(`/auth/login/`)\r\n    },\r\n    captcha(){\r\n        return instance.get<getCaptchaType>(`/security/get-captcha-url/`)\r\n    }\r\n}\r\n\r\n","\r\nimport { loginAPI } from \"../api/loginAPI\";\r\nimport { userAPI } from \"../api/userAPI\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCES = 'GET_CAPTCHA_URL_SUCCES'\r\n\r\nlet initialState = {\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    userId: null as number | null,\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as string | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType>;\r\n\r\n\r\nconst authReducer = (state = initialState, action:ActionsType):InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return { ...state, ...action.data }\r\n        }\r\n        case GET_CAPTCHA_URL_SUCCES:{\r\n            return {...state,...action.data}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const actions = {\r\n    setUserData : (email:string | null, login:string | null, userId:number | null, isAuth:boolean) => ({ type: SET_USER_DATA, data: { email, login, userId, isAuth } }as const),\r\n    getCaptchaUrlSucces :  (captchaUrl:string | null) => ({ type: GET_CAPTCHA_URL_SUCCES, data: { captchaUrl } }as const),\r\n}\r\n\r\n\r\nexport const setUserDataThunkCreate = ():ThunkType =>async(dispatch)=> {\r\n   \r\n        userAPI.dateOfMyLogin().then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(actions.setUserData(data.data.email, data.data.login, data.data.id, true))\r\n            }\r\n        })\r\n}\r\n\r\nexport const loginThunkCreator = (email:string, password:string, rememberMe:boolean):ThunkType => async (dispatch) => {\r\n   let response = await loginAPI.logIn(email, password, rememberMe)\r\n        if (response.data.resultCode === 0) {\r\n            \r\n            dispatch(setUserDataThunkCreate())\r\n        }\r\n        // }else if(response.data.resultCode === 10){\r\n        //        dispatch(captchaThunkCreator()) \r\n        //     }\r\n        \r\n            // let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n            \r\n            // dispatch(stopSubmit(\"login\", { _error: message }))\r\n        // }\r\n    \r\n}\r\n\r\nexport const logOutThunkCreator = ():ThunkType => async (dispatch) => {\r\n  const response = await loginAPI.logOut();\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(actions.setUserData(null, null, null, false))\r\n        }\r\n\r\n}\r\n\r\nexport const captchaThunkCreator = ():ThunkType => async (dispatch) => {\r\n    const response = await loginAPI.captcha();\r\n    const captchaUrl = response.data.url;\r\n    dispatch(actions.getCaptchaUrlSucces(captchaUrl))\r\n}\r\n\r\nexport default authReducer\r\n\r\n","\r\nimport React from \"react\"\r\n\r\n\r\ntype ChatMessageType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string\r\n\r\n}\r\nexport type StatusChangeType = 'pedding'|'ready'|'error';\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageType[]) => void;\r\ntype StatusChangedSubscriberType = (status: StatusChangeType) => void\r\n\r\nlet ws: WebSocket | null = null;\r\nlet subscribes = {\r\n    'message-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed' : [] as StatusChangedSubscriberType[]\r\n};\r\n\r\ntype EventNamesType =  'message-received' | 'status-changed' ;\r\nconst closeHandler = () => {\r\n    console.log(\"CLOSE CHANNEL\")\r\n    subscribes[\"status-changed\"].forEach((el)=>el('pedding'));\r\n    setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst openHandler = ()=>{\r\n    notifySubscribersStatusHandle('ready')\r\n}\r\n\r\nlet notifySubscribersStatusHandle = (status:StatusChangeType)=>{\r\n    subscribes[\"status-changed\"].forEach((el)=>el(status));\r\n}\r\nconst cleanUpChannel=()=>{\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', eventDataWebSocket)\r\n      ws?.removeEventListener('open', openHandler)\r\n    //   ws?.removeEventListener('error', closeHandler)\r\n}\r\n\r\nfunction createChannel() {\r\n\r\n    cleanUpChannel()\r\n    ws?.close()\r\n    ws = (new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'));\r\n    notifySubscribersStatusHandle('pedding')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', eventDataWebSocket);\r\n    ws.addEventListener('open',openHandler)\r\n}\r\n\r\n// function stopChannel() {\r\n//     ws?.removeEventListener('close', closeHandler)\r\n//     ws?.close()\r\n// }\r\n\r\nlet eventDataWebSocket = (e: MessageEvent) => {\r\n    let newMessages = JSON.parse(e.data)\r\n    subscribes['message-received'].forEach((e)=>e(newMessages))\r\n    console.log(JSON.parse(e.data))\r\n}\r\n\r\nexport const chatAPI = {\r\n\r\n    start(){\r\n        createChannel()\r\n    },\r\n    stop(){\r\n        subscribes['message-received']=[];\r\n        subscribes['status-changed']=[];\r\n        ws?.close();\r\n        cleanUpChannel();\r\n    \r\n    },\r\n    subscribe(eventName:EventNamesType,message:MessagesReceivedSubscriberType | StatusChangedSubscriberType ){\r\n        //@ts-ignore\r\n        subscribes[eventName].push(message);\r\n        return()=>{\r\n             //@ts-ignore\r\n            subscribes[eventName].filter((s)=>s!==message)\r\n        }\r\n    },\r\n    unsubscribe(eventName:EventNamesType,message:MessagesReceivedSubscriberType | StatusChangedSubscriberType ){\r\n         //@ts-ignore\r\n        subscribes[eventName] = subscribes[eventName].filter((s)=>s!==message)\r\n    },\r\n    send(message:any){\r\n        ws?.send(message)\r\n\r\n    }\r\n}","\r\nimport { Dispatch } from 'redux';\r\nimport { chatAPI, StatusChangeType } from '../api/chatPageAPI';\r\nimport { ChatMessageType } from './../pages/Chat/ChatPage';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\n\r\nconst MESS_RECEIVED = 'MESS_RECEIVED';\r\nconst STATUS_CHANGE = 'STATUS_CHANGE'\r\n\r\nlet initialState = {\r\n   messages:[] as ChatMessageType[],\r\n   status: '' as StatusChangeType\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkTypes = BaseThunkType<ActionsType>\r\n\r\nexport const chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n       case(MESS_RECEIVED):{\r\n           return {\r\n               ...state,\r\n               messages:[...state.messages.slice(-5),...action.payload.message],\r\n              \r\n           }\r\n       }\r\n       case(STATUS_CHANGE):{\r\n        return {\r\n            ...state,\r\n            status:action.payload.status\r\n           \r\n        }\r\n    }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const actions = {\r\n\r\n    messReceived:(message:ChatMessageType[])=>({\r\n        type:'MESS_RECEIVED',payload:{message}\r\n    }as const),\r\n    statusChange:(status:StatusChangeType)=>({\r\n        type:'STATUS_CHANGE',payload:{status}\r\n    }as const),\r\n}\r\n\r\nlet newMessageHandler:((messages:ChatMessageType[])=>void)|null = null;\r\nlet newStatusHandler:((status:StatusChangeType)=>void)|null = null;\r\n\r\nconst newStatusHandlerCreator =(dispatch:Dispatch)=>{\r\n    if(newStatusHandler===null){\r\n        newStatusHandler=(status)=>{\r\n            dispatch(actions.statusChange(status))\r\n        }\r\n    }\r\n   return newStatusHandler\r\n}\r\n\r\nconst newMessageHandlerCreator =(dispatch:Dispatch)=>{\r\n    if(newMessageHandler===null){\r\n        newMessageHandler=(message)=>{\r\n            dispatch(actions.messReceived(message))\r\n        }\r\n    }\r\n   return newMessageHandler\r\n}\r\n\r\nexport const startMessageListening = ()=>async(dispatch:Dispatch)=>{\r\n    chatAPI.start()\r\n    chatAPI.subscribe('message-received',newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed',newStatusHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessageListing = ()=>async(dispatch:Dispatch)=>{\r\n    chatAPI.unsubscribe('message-received',newMessageHandlerCreator(dispatch))\r\n     chatAPI.unsubscribe('status-changed',newStatusHandlerCreator(dispatch))\r\n    chatAPI.stop();\r\n}\r\n\r\nexport const sendMessage = (message:any)=>async(dispatch:Dispatch)=>{\r\n    chatAPI.send(message);\r\n}\r\n\r\n\r\n// messReceived:(messages:ChatMessageType[])=>({\r\n//     type:'MESS_RECEIVED',payload:{messages}\r\n// }as const)\r\n\r\n\r\n\r\n// let newMessageHandler:((messages:ChatMessageType[])=>void)|null  = null;\r\n\r\n// const newMessageHandlerCreator = (dispatch:Dispatch)=>{\r\n//     if(newMessageHandler===null){\r\n//         newMessageHandler = (messages)=>{\r\n//             dispatch(actions.messReceived(messages))\r\n//         }\r\n//     }\r\n//     return newMessageHandler\r\n// }\r\n\r\n// export const startMessageListening = ():ThunkTypes =>async(dispatch:Dispatch)=>{\r\n//     chatAPI.start()\r\n//      chatAPI.subscribe(newMessageHandlerCreator(dispatch));\r\n    \r\n// }\r\n\r\n// export const stopMessageListening = ():ThunkTypes =>async(dispatch:Dispatch)=>{\r\n//     chatAPI.stop();\r\n//      chatAPI.unsubscribe(newMessageHandlerCreator(dispatch));\r\n   \r\n// }\r\n\r\n// export const sendMessageChatPage = (message:string)=>async(dispatch:Dispatch)=>{\r\n//     chatAPI.send(message)\r\n// }\r\n\r\n// export const getUserProfile = (userId: number): ThunkTypes => async (dispatch) => {\r\n//     let response = await profileAPI.getProfile(userId)\r\n//     dispatch(actions.setUserProfile(response))  //response.data\r\n// }\r\n\r\n","import { Action, applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { dialogsReducer } from \"./dialogs-reducer\";\r\nimport { sidebarReducer } from \"./sidebar-reducer\";\r\nimport { profileReducer } from \"./profile-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport { chatReducer } from \"./chat-reducer\";\r\n\r\n\r\nexport let reducers = combineReducers({\r\n    profileReducer,    //profileReducer  : profileReducer\r\n    dialogsReducer,    //profileReducer  : profileReducer\r\n    sidebarReducer,     //sidebarReducer  : sidebarReducer\r\n    usersReducer,\r\n    authReducer,\r\n    form: formReducer,\r\n    chat:chatReducer\r\n});\r\n\r\ntype ReducesType = typeof reducers;\r\nexport type AppStateType = ReturnType<ReducesType>;\r\n\r\nexport type PropertisTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertisTypes<T>>\r\n\r\nexport type BaseThunkType<AT extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, AT>\r\n\r\n// export type InferActionsTypes<T extends {[key:string]: (...args:any[])=>any}> = ReturnType<PropertisTypes<T>>\r\n\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/headerlogo.174167df.png\";","import React from 'react';\r\nimport h from \"./Header.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport headerLogo from \"./headerlogo.png\";\r\ntype HeaderType = {\r\n  login: string | null,\r\n  isAuth: boolean,\r\n  logOutThunkCreator:()=>void\r\n}\r\n\r\nconst Header:React.FC<HeaderType> = ({logOutThunkCreator,isAuth,login})=>{\r\nconst logOut=logOutThunkCreator\r\n\r\n    return (\r\n        <header className={h.header}>\r\n      <img className={h.imgheader} src={headerLogo}></img>\r\n      <div className={h.linkLogin}>\r\n        {isAuth \r\n        ?  login && <button className={h.loginBtn} onClick={logOut}>Logout</button> \r\n        : <NavLink className={h.LoginLabel} to='/login/'>Login</NavLink>\r\n        }\r\n     \r\n      </div>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport n from './Navbar.module.scss';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst NavBar = ()=>{\r\n    return (\r\n      <div className={n.nav}>\r\n      <div className={n.item}>\r\n        <NavLink to='/profile' className={({isActive})=>isActive?`${n.active}`:\"\"}>Profile</NavLink>\r\n        </div>\r\n        <div className={n.item}>\r\n        <NavLink to=\"/chat\">Chat-WebSocket</NavLink>\r\n        </div> \r\n        <div className={n.item}>\r\n        <NavLink to='/users' className={({isActive})=>isActive?`${n.active}`:\"\"}>Users</NavLink>\r\n        </div>\r\n        <div className={n.item}>\r\n        <NavLink to='/dialogs' className={({isActive})=>isActive?`${n.active}`:\"\"}>Message</NavLink>\r\n        </div>\r\n      <div className={n.item}>\r\n        <NavLink to=\"/news\">News</NavLink>\r\n        </div>\r\n      <div className={n.item}>\r\n        <a href=\"#\">Settings</a>\r\n        </div>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","export default __webpack_public_path__ + \"static/media/loader.372b42cf.gif\";","import React, { useEffect, useState } from 'react';\r\nimport { profileAPI } from '../../../api/profileAPI';\r\n\r\n\r\n\r\nconst ProfileStatusWithHook = (props:any) => {\r\n\r\n    const [editMode,setEditMode] = useState(false);\r\n    const [status,setStatus]=useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    \r\n    const deactivateStatus = ()=>{\r\n        setEditMode(false)\r\n        profileAPI.updateStatus(status).then(response=>{\r\n            if(response.data.resultCode===0){\r\n                props.setStatus(status)\r\n            }\r\n           \r\n        })\r\n\r\n    }\r\n\r\n    const onStatusChange = (event:any)=>{\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                  <b>Status : </b>  <span onClick={()=>{setEditMode(true)}} >{props.status}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                   <input onChange={onStatusChange} onBlur={deactivateStatus} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHook","\r\n\r\nimport { Field, reduxForm,InjectedFormProps } from \"redux-form\";\r\nimport { FormForControls } from \"../../common/FormsControl/FormsControl\";\r\nimport { Contact } from \"./ProfileInfo\";\r\nimport {ProfileType}from \"../../common/types/types\"\r\nimport p from './ProfileInfo.module.scss';\r\nimport { useEffect } from \"react\";\r\nconst FullName = FormForControls(\"textarea\");\r\n\r\n\r\ntype ProfDataType = {\r\n    profile:ProfileType\r\n}\r\n\r\nconst ProfData:React.FC<InjectedFormProps<ProfileType,ProfDataType>&ProfDataType> = ({handleSubmit,profile,error}) => {\r\n   \r\n\r\n    return <form onSubmit={handleSubmit}>\r\n            <div><button  className={p.editBtn}>save</button></div>\r\n            {error && <div>ОШИБКА</div>}\r\n            <div>\r\n                <b>Full Name</b> :\r\n                <Field component={\"input\"} name=\"fullName\"/>\r\n            </div>\r\n            <div>\r\n                <b>lookingForAJob</b> :\r\n                <Field component={\"input\"} type=\"checkbox\" name=\"lookingForAJob\"/>\r\n            </div>\r\n            <div>\r\n                <b>My proffesional skills</b> : <Field component={\"textarea\"} name=\"lookingForAJobDescription\" placeholder=\"my professional skills\"/>\r\n            </div>\r\n            <div>\r\n                <b>About me</b> : <Field component={\"textarea\"} name=\"aboutMe\"/>\r\n            </div>\r\n            <div>{Object.keys(profile.contacts).map(key=>{\r\n           return  <div key={key}> <b> {key}  <Field component={\"input\"} name={\"contacts.\"+key}/></b></div>\r\n            })}</div>\r\n            \r\n        </form>\r\n}\r\n\r\nexport const ProfileDataFormmm = reduxForm<ProfileType,ProfDataType>({ form: \"formddd\" })(ProfData)","import React, { useEffect, useState } from 'react';\r\nimport p from './ProfileInfo.module.scss';\r\nimport loader from '../../../assets/images/loader.gif'\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHook from './ProfileStatusWithHook';\r\nimport profPhoto from './prof.jpg';\r\nimport { ProfileDataFormmm } from './ProfileDataForm';\r\nimport { ProfileType, ProfileContact } from '../../common/types/types';\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    isOwner: boolean,\r\n    setStatus: (status: string) => void,\r\n    saveProfile: (FormData: ProfileType) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({ profile, isOwner, setStatus, status, saveProfile }) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    if (!profile) { return <div><img src={loader} alt=\"loader\" /></div> }\r\n\r\n    const onSubmitt = (FormData: ProfileType) => {\r\n        saveProfile(FormData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img className={p.proffPhoto} src={profile.photos.large || profPhoto} />\r\n            {editMode\r\n                ? <ProfileDataFormmm initialValues={profile} profile={profile} onSubmit={onSubmitt} />\r\n                : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />}\r\n\r\n            <ProfileStatusWithHook status={status} setStatus={setStatus} />\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType,\r\n    isOwner: boolean,\r\n    goToEditMode: () => void,\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({ profile, isOwner, goToEditMode }) => {\r\n  \r\n    return <div className={p.profFomr}>\r\n        {isOwner && <div><button className={p.editBtn} onClick={goToEditMode}>edit</button></div>}\r\n        <div className={p.OnefieldProf}>\r\n            <b>Full Name</b>  {profile.fullName}\r\n        </div>\r\n        <div className={p.OnefieldProf}>\r\n            <b>lookingForAJob</b>  {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        <div className={p.OnefieldProf}>\r\n            <b>My proffesional skills</b>  {profile.lookingForAJobDescription}\r\n        </div>\r\n        <div className={p.OnefieldProf}>\r\n            <b>About me</b>  {profile.aboutMe}\r\n        </div>\r\n        <div >\r\n            <b>Contacts</b> : {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ProfileContact]} />\r\n            }\r\n\r\n            )}\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact: React.FC<ContactType> = ({ contactTitle, contactValue }) => {\r\n    return <div><b>{contactTitle}</b> : {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport p from './Profile.module.scss';\r\nimport MyPosts from './MyPosts/MyPosts'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n// import MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport { ProfileType } from '../common/types/types';\r\n\r\nexport type ProfilePresentType = {\r\n    profile:ProfileType,\r\n    status:string,\r\n    isOwner:boolean,\r\n    setStatus:(status: string)=>void,\r\n    saveProfile:(profile: ProfileType)=>void\r\n}\r\n\r\nconst Profile:React.FC<ProfilePresentType> = ({profile,status,isOwner,setStatus,saveProfile})=>{\r\n  \r\n    return (\r\n      <div className={p.container}>\r\n       <ProfileInfo profile={profile} status={status} isOwner={isOwner} setStatus={setStatus} saveProfile={saveProfile}/>\r\n        {/* <MyPostsContainer\r\n        /> */}\r\n        </div>\r\n      \r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport Header from './Header';\r\nimport h from './Header.module.scss'\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { actions, setUserDataThunkCreate } from '../../redux/auth-reducer';\r\nimport { logOutThunkCreator } from '../../redux/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nclass HeaderContainer extends React.Component<MapStateToPropsType&MapDispatchToPropsType> {\r\n\r\n  componentDidMount() {\r\n    this.props.setUserDataThunkCreate()\r\n    \r\n  }\r\n\r\n  render() {\r\n    return <Header {...this.props} logOutThunkCreator={this.props.logOutThunkCreator}  />\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state:AppStateType) => ({\r\n isAuth:state.authReducer.isAuth,\r\n login:state.authReducer.login\r\n})\r\n\r\ntype MapStateToPropsType = {\r\n  login: string | null,\r\n  isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n  setUserData : (email:string | null, login:string | null, userId:number | null, isAuth:boolean) =>void,\r\n  setUserDataThunkCreate:()=>void,\r\n  logOutThunkCreator:()=>void\r\n}\r\n\r\nexport default connect(mapStateToProps, { setUserData:actions.setUserData,setUserDataThunkCreate, logOutThunkCreator })(HeaderContainer)","import React, { useEffect } from 'react';\r\nimport Profile from './Profile';\r\nimport { actions, getUserProfile, saveProfile } from '../../redux/profile-reducer';\r\nimport { profileAPI } from '../../api/profileAPI';\r\nimport { ProfileType } from '../common/types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { Navigate, useParams } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\n\r\n\r\nconst ProfileContainer: React.FC<any> = () => {\r\n    let { userId }: any = useParams();\r\n    let dispatch = useDispatch();\r\n    const isAuth = useSelector((store:AppStateType)=>store.authReducer.isAuth)\r\n    const profile: any = useSelector((store: AppStateType) => store.profileReducer.profile);\r\n    const status = useSelector((store: AppStateType) => store.profileReducer.status);\r\n   \r\n   \r\n    const setStatuss = (status: string) => {\r\n        dispatch(actions.setStatus(status))\r\n    };\r\n    const saveProfilee = (profile: ProfileType) => {\r\n        dispatch(saveProfile(profile))\r\n    };\r\n    const getUserProfilee = (userId: number) => {\r\n        dispatch(getUserProfile(userId))\r\n    }\r\n    if (!userId) {\r\n        userId = '21176'\r\n    }\r\n    useEffect(() => {\r\n       \r\n        // if(!isAuth){return <Navigate to={\"/login\"}/>}\r\n        getUserProfilee(userId)\r\n        profileAPI.getStatus(userId).then(response => {\r\n            setStatuss(response.data)\r\n        })\r\n    }, [])\r\n    return (\r\n        <>\r\n        { isAuth===false && <Navigate to={\"/login\"}/> }\r\n        <Profile profile={profile} status={status} saveProfile={saveProfilee} setStatus={setStatuss} isOwner={userId === '21176'} />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ProfileContainer","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { Field, Formik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { loginThunkCreator } from \"../../redux/auth-reducer\";\r\nimport { Navigate } from \"react-router\";\r\nimport log from \"./Login.module.scss\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\n\r\ntype LoginFormType = {\r\n    loginThunkCreatorr: (login: string, password: string, checkbox: boolean) => void\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<LoginFormType> = (props) => {\r\n\r\n\r\n\r\n    const validateSchema: any = Yup.object().shape({\r\n        login: Yup.string().email('Введите верный email').required()\r\n\r\n    })\r\n    const submit = (values: any) => {\r\n        props.loginThunkCreatorr(values.login, values.password, values.checkbox);\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            initialValues={{ login: '', password: '', rememberMe: '' }}\r\n            onSubmit={submit}\r\n            validationSchema={validateSchema}\r\n        >\r\n            {props => (\r\n                <form onSubmit={props.handleSubmit} className={log.form}>\r\n                    <div className={log.Login}>Email<Field component=\"input\" name=\"login\" placeholder='your email,please' /></div>\r\n                    {props.errors.login && props.errors.login}\r\n                    <div className={log.Pass}>Pass<Field component=\"input\" name=\"password\" placeholder='your password,please'/></div>\r\n                    <div ><span className={log.Subm}>Submit</span ><Field component=\"input\" type=\"checkbox\" name=\"rememberMe\" /></div>\r\n                    <button type=\"submit\" className={log.btn}>send</button>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n\r\n}\r\n\r\n\r\n// class LoginPresentationContainer extends React.Component<AllTypesLogPresent & any>{\r\n//     render() {\r\n//         // const Submit =(FormData:any)=>{\r\n//         //     this.props.loginThunkCreator(FormData.login,FormData.password,FormData.checkbox,FormData.captcha);\r\n\r\n//         // }\r\n//         if (this.props.isAuth) {\r\n//             return <Navigate to=\"/dialogs/\" />\r\n//         }\r\n\r\n\r\n//         return <div>\r\n//             <h1><LoginForm {...this.props} /></h1>\r\n//         </div>\r\n//     }\r\n// }\r\n\r\n\r\nexport const LoginPresentationContainer: React.FC<any> = (props) => {\r\n\r\n\r\n    // const captchaUrl = useSelector((state:AppStateType)=>state.authReducer.captchaUrl);\r\n    const isAuth = useSelector((state: AppStateType) => state.authReducer.isAuth);\r\n    const dispatch = useDispatch();\r\n    const loginThunkCreatorr: any = (login: string, password: string, checkbox: boolean) => {\r\n        dispatch(loginThunkCreator(login, password, checkbox))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Navigate to=\"/profile\" />\r\n    }\r\n    return <div>\r\n        <h1><LoginForm loginThunkCreatorr={loginThunkCreatorr} /></h1>\r\n        <div className={log.regInfo}>\r\n            <span>If you are not registered, please go to <div><a href=\"https://social-network.samuraijs.com/\">https://social-network.samuraijs.com/</a></div>for further registration.</span>\r\n            <div><span>Unfortunately, at the moment the server does not register on any ready-made project, entrusting this procedure only to the source site.</span></div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n// const mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n//     isAuth: state.authReducer.isAuth,\r\n//     captchaUrl: state.authReducer.captchaUrl\r\n// })\r\n\r\n// type mapStateToPropsType = {\r\n//     captchaUrl: string | null,\r\n//     isAuth: boolean\r\n\r\n// };\r\n\r\n\r\n// type mapDispatchToPropsType = {\r\n//     loginThunkCreator: (login: string, password: string, checkbox: boolean, captcha: string | null,setStatus:any) => void\r\n// }\r\n\r\n// type AllTypesLogPresent = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n// export default connect(mapStateToProps, { loginThunkCreator })(LoginPresentationContainer)","import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Navigate } from \"react-router\";\r\nimport { sendMessage, startMessageListening, stopMessageListing } from \"../../redux/chat-reducer\";\r\nimport { AppStateType, store } from \"../../redux/redux-store\";\r\nimport cp from \"./ChatPage.module.scss\";\r\n\r\n\r\nexport type ChatMessageType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string\r\n\r\n}\r\nexport const ChatPage: React.FC<any> = () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\nconst Chat: React.FC<any> = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const messages = useSelector((store: AppStateType) => store.chat.messages)\r\n    const isAuth = useSelector((store:AppStateType)=>store.authReducer.isAuth)\r\n    useEffect(() => {\r\n        dispatch(startMessageListening());\r\n        return () => {\r\n            dispatch(stopMessageListing())\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return <div  className={cp.chatPageBlock} >\r\n        {!isAuth && <Navigate to=\"/login\"/>}\r\n        <div>\r\n            {messages.map((el, index) => < Messages key={index} oneFromDates={el} />)}\r\n        </div>\r\n        <div><AddMessageForm /></div>\r\n\r\n    </div>\r\n}\r\n\r\n\r\nconst Messages: React.FC<any> = ({ oneFromDates }) => {\r\n\r\n    const h2ref = useRef(null);\r\n\r\n    useLayoutEffect(() => {\r\n        //@ts-ignore\r\n        h2ref.current?.scrollIntoView();\r\n    }, []);\r\n\r\n    return <div>\r\n       \r\n        <div>\r\n            <Message oneFromDates={oneFromDates} /> \r\n        </div>\r\n        <div>\r\n        <h2 ref={h2ref}></h2>\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nconst Message: React.FC<any> = React.memo(({ oneFromDates }) => {\r\n\r\n   \r\n\r\n\r\n    return <div>\r\n        <img src={oneFromDates.photo} alt=\"\" />\r\n        <div>id - <span>{oneFromDates.userId}</span></div>\r\n        <div>name - <span>{oneFromDates.userName}</span></div>\r\n        <div>{oneFromDates.message}</div>\r\n    </div>\r\n})\r\n\r\nconst AddMessageForm: React.FC<any> = ({ messages }) => {\r\n\r\n    const [stateMessages, setStateMessages] = useState(messages);\r\n    const dispatch = useDispatch();\r\n    const status = useSelector((store: AppStateType) => store.chat.status);\r\n\r\n    const onChangee = (event: any) => {\r\n        setStateMessages(event.currentTarget.value)\r\n    }\r\n    const sendMessagee = () => {\r\n        dispatch(sendMessage(stateMessages))\r\n        setStateMessages('')\r\n    }\r\n    return <div>\r\n        <div><textarea onChange={onChangee} value={stateMessages}></textarea></div>\r\n        <button disabled={status !== 'ready'} onClick={sendMessagee}>Send</button>\r\n    </div>\r\n}","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\"\r\n\r\n\r\n\r\nexport const TrainingComponent:React.FC<any> = ()=>{\r\n\r\n    // const userss = ['Alexey','Ilia','Ckamelot','DonTuan','Chachid','Nigeriec','Archangel','Nika','Nadin']\r\n    const [users,setUsers] = useState<any[]>([]);\r\n    const [oneUser,setOneUser]= useState<any>(null);\r\n    const [valueForm,setValueForm]=useState<any>('');\r\n    const [searchTemp,setTempSearch] = useState<any>();\r\n\r\n    const fetchData = (value:any)=>{\r\n        axios\r\n        .get(`https://social-network.samuraijs.com/api/1.0/users?term=${valueForm}`).then(res=>setUsers(res.data.items))\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"SYNC DETAILS\")\r\n        // axios\r\n        // .get(`https://social-network.samuraijs.com/api/1.0/users?`).then(res=>setUsers(res.data.items))\r\n\r\n        fetchData(valueForm)\r\n\r\n    },[searchTemp])\r\n\r\n  \r\n\r\n    \r\n    let onChangeFrom = (event:any)=>{\r\n        setValueForm(event.currentTarget.value)\r\n    }\r\n\r\n    let submitAction = ()=>{\r\n\r\n        console.log(\"SYNC DETAILS\")\r\n        // fetchData(valueForm)\r\n        setTempSearch(valueForm)\r\n        // setUsers(users.filter((user)=>user))\r\n          console.log(users)\r\n    }\r\n\r\n    return <div>\r\n        <div><input onChange={onChangeFrom} placeholder=\"find name\" value={valueForm} type=\"text\" /><button onClick={submitAction}>find</button></div>\r\n        {users.map((user)=><li key={user.id} onClick={()=>{setOneUser(user)}}>{user.name}</li>)}\r\n        <div>\r\n           {oneUser &&  <div><div>photo - <img src={oneUser.photos.small? oneUser.photos.small : oneUser.photos.large } alt=\"\" /></div>\r\n            <div>status - {oneUser.status}</div>\r\n            <div>name - {oneUser.name}</div>\r\n            </div>}\r\n        </div>\r\n    </div>\r\n}","// import logo from './logo.svg';\nimport './App.scss';\nimport Header from './components/Header/Header';\nimport NavBar from './components/Navbar/Navbar';\nimport Profile from './components/Profile/Profile';\n// import UsersContainer from './components/Users/UsersContainer';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { Routes } from \"react-router-dom\";\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\n// import ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport React, { Suspense } from 'react';\nimport Preloader from './components/common/Preloader/Preloader';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport { LoginPresentationContainer } from './components/Login/Login';\nimport { ChatPage } from './pages/Chat/ChatPage';\nimport { TrainingComponent } from './components/Dialogs/TrainingComponent';\n// {<Dialogs dial={props.dialogs} messa={props.messages} />}\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // Lazy-loaded\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\n// const ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\nexport const App = (props) => {\n\n\n  return (\n\n    <div className=\"app-wrapper\">\n      <HeaderContainer />\n      <NavBar />\n\n      <div className=\"app-wrapper-content\">\n        <Suspense fallback={<Preloader />}>\n          <Routes>\n\n            <Route path='/profile' element={<ProfileContainer store={props.store} />}>\n            <Route path=':userId' element={<ProfileContainer store={props.store} />} />\n            </Route>\n            <Route path='/dialogs/' element={<DialogsContainer store={props.store} />} />\n            <Route path='/users/' element={<UsersContainer />} />\n            <Route path='/login/' element={<LoginPresentationContainer />} />\n            <Route path='/training/' element={<TrainingComponent />} />\n            <Route path='/chat' element={<ChatPage />} />\n          </Routes>\n        </Suspense>\n      </div>\n    </div>\n\n  )\n}\n\n","\n\nimport {store} from './redux/redux-store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\n\n\n//  let rerenderEntireTree= ()=>{}\n\n        ReactDOM.render(<React.StrictMode>\n        <BrowserRouter>\n            <Provider store ={store}>\n            <App \n            />\n            </Provider>\n            </BrowserRouter>\n            </React.StrictMode>,document.getElementById('root'));\n     \n   \n        \n\n\n// rerenderEntireTree(store.getState());\n\n// store.subscribe(rerenderEntireTree)\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgclass\":\"ProfileInfo_imgclass__3brB_\",\"descriptionprof\":\"ProfileInfo_descriptionprof__3iEIv\",\"proffPhoto\":\"ProfileInfo_proffPhoto__wMKuJ\",\"editBtn\":\"ProfileInfo_editBtn__2_XzO\",\"profFomr\":\"ProfileInfo_profFomr__3JIk4\",\"OnefieldProf\":\"ProfileInfo_OnefieldProf__1B1NM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__31wyx\",\"Login\":\"Login_Login__3D7du\",\"Pass\":\"Login_Pass__212oV\",\"Subm\":\"Login_Subm__3AGUi\",\"btn\":\"Login_btn__S9RIu\",\"regInfo\":\"Login_regInfo__1qcL5\"};","import { AuthMeGetType, FollowPutType, GetUsersType } from \"../components/common/types/types\";\r\nimport { instance } from \"./api\";\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage:number, pageSize:number,term:string='',friend:null | boolean=null) {\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+(friend===null ? '' : `&friend=${friend}`))\r\n            .then(response => response.data)\r\n\r\n    },\r\n    dateOfMyLogin(){\r\n        return instance.get<AuthMeGetType>(`auth/me/`).then(response=>response.data)\r\n    },\r\n\r\n    follow(userId:number|null){\r\n        return  instance.post<FollowPutType>(`follow/${userId}`).then(response=>response.data)\r\n    },\r\n    unfollow(userId:number|null) {\r\n      return  instance.delete<FollowPutType>(`follow/${userId}`).then(response=>response.data)\r\n    }   \r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1-YCv\",\"imgheader\":\"Header_imgheader__3HhC1\",\"linkLogin\":\"Header_linkLogin__3Tj1J\",\"loginBtn\":\"Header_loginBtn__1SWea\",\"LoginLabel\":\"Header_LoginLabel__29H6K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__3A2dm\",\"error\":\"FormsControl_error__2I7lC\"};","import { InferActionsTypes } from \"./redux-store\";\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\r\nconst SEND_MESSAGE = 'SEND-MESSAGE';\r\n\r\ntype messagesArrayType = {\r\n    id:number,\r\n    mes:string\r\n}\r\n\r\ntype dialogsArrayType = {\r\n    id:number,\r\n    name:string\r\n}\r\n\r\nlet initialState = {\r\n    messages: [\r\n        { id: 1, mes: 'Hi' },\r\n        { id: 2, mes: 'How is your id' },\r\n        { id: 3, mes: 'Whats app?' },\r\n        { id: 4, mes: 'Whtfck???' },\r\n        { id: 5, mes: 'Olala' }\r\n    ]as Array<messagesArrayType>,\r\n    dialogs: [\r\n        { id: 1, name: 'Dimych' },\r\n        { id: 2, name: 'Petya' },\r\n        { id: 3, name: 'Sasha' },\r\n        { id: 4, name: 'Petya' },\r\n        { id: 5, name: 'Valera' }\r\n    ]as Array<dialogsArrayType>,\r\n    newMessageBody: ''\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const dialogsReducer = (state = initialState, action:ActionsType):InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY: {\r\n            let stateCopy = { ...state, newMessageBody: action.body };\r\n            return stateCopy;\r\n        }\r\n        case SEND_MESSAGE: {\r\n            let body = state.newMessageBody;\r\n            let stateCopy = { ...state,newMessageBody:'', messages: [...state.messages,{ id: 6, mes: action.mes }] };\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n      sendMessageCreator : (mes:string) => {\r\n        return { type: SEND_MESSAGE,mes } as const\r\n    },\r\n      updateNewMessageBodyCreator : (body:string) => {\r\n        return { type: UPDATE_NEW_MESSAGE_BODY, body: body } as const\r\n}\r\n}\r\n\r\n"],"sourceRoot":""}